* Повторение SQL

База данных издательства.

[[./database.graphml]]
[[./database.png]]

**authors - авторы**
- au_fname - имя
- au_lname - фамилия
- zip - почтовый индекс


**titles - книги**

- title_name - название книги
- type - тип(биография и тп)
- pub_id - id издательства
- sales - продажи
- pubdate - дата публикации
- contract: boolean
  - 1 - подписан
  - 0 - не подписан

**titles_authors**

Реализует связь многим ко многим(**стыковочная/связующая таблица**)

- royality_share - доля автора за книгу(0..1, для книг с одним автором это число всегда 1)
- au_order - порядок автора(важен, для гонорара)

**royalties**

advance - предоплата автору
royalty - доля общего дохода с продаж книги

** Задание 1

Написать SQL код создания таблицы titles с учётом связей с таблицей publishers

#+begin_src sql
CREATE TABLE titles(
   title_id char(3) NOT NULL UNIQUE PRIMARY KEY,
   title_name varchar(40) NOT NULL,
   typ`e varchar(15) NOT NULL,
   pub_id char(3) UNIQUE,
   FOREIGN KEY (pub_id) REFERENCES publishers(pub_id)
)
#+end_src

** Задание 2

Вывести список названий книг, для которых контракт пока не подписан.
#+begin_src sql
SELECT title_name FROM titles WHERE contract = 0
#+end_src

** Задание 3
Вывести названия книг биографий, который продаются дешевле 20 $

#+begin_src sql
SELECT title_name FROM titles WHERE price < 20 AND type = 'biography'
#+end_src

** Задание 4 
Перечислить id книг которые являются биографией в порядке убывания дохода от продажи.

Доход = Число * Цена одной копии

Для нового поля использовать псевдоним AS Revenue. 

Для заголовков столбцов не только значения по умолчанию, но и псевдонимы указаные после слова AS

#+begin_src sql
SELECT title_id, sales * price AS Revenue FROM titles WHERE type = 'biography' ORDER BY sales * price DESC
#+end_src

** Задание 5

Вывести минимальную цену книги.

#+begin_src sql
SELECT MIN(price) AS "Минимальная цена книги" FROM titles
#+end_src

** Задание 6

Вывести средный и общий объём продаж книг, написанных по бизнесу.

#+begin_src sql
SELECT AVG(sales) AS "Средний", SUM(sales) AS "Общий" FROM titles WHERE type = "buisness"
#+end_src

** Фильтрация групп с помощью HAVING

Очерёдность с которой СУБД применяет предложения следующая:
1. WHERE - фильтрует строки результата работы FROM и JOIN
2. GROUP BY - группирует выход WHERE
3. HAVING - фильтрует после всего)

** Задание 7

Вывести индефикаторы авторов, вывести то количество книг, которые написал этот автор в том числе 
в соавторстве.

#+begin_src sql
SELECT au_id AS "Автор ID", COUNT(*) GROUP BY au_id
#+end_src

